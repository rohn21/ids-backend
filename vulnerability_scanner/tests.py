class Scan(models.Model):
    SCAN_TYPE = [
        ('WEB', 'Web'),
        ('SYSTEM', 'System'),
        ('NETWORK', 'Network'),
    ]

    SCAN_STATUS = [
        ('QUEUED', 'Queued'),
        ('RUNNING', 'Running'),
        ('COMPLETED', 'Completed'),
        ('ERROR', 'Error'),
    ]

    target_url = models.URLField(blank=True, null=True)
    scan_type = models.CharField(max_length=255, choices=SCAN_TYPE, blank=True, null=True)
    scan_start_time = models.DateTimeField(blank=True, null=True)
    scan_end_time = models.DateTimeField(null=True, blank=True)
    scan_status = models.CharField(max_length=255, choices=SCAN_STATUS, blank=True, null=True)
    scan_user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='scans', blank=True, null=True)
    uploaded_file = models.FileField(upload_to='uploaded_scan/', blank=True, null=True)

    class Meta:
        db_table = 'scan'

    def __str__(self):
        return self.scan_type


class Vulnerability(models.Model):
    SEVERITY_TYPE = [
        ('LOW', 'Low'),
        ('MEDIUM', 'Medium'),
        ('HIGH', 'High'),
    ]
    vulnerability_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, blank=True,
                                        null=True)  # review
    scan = models.ForeignKey(Scan, on_delete=models.CASCADE, related_name='vulnerabilities', blank=True, null=True)
    vulnerability_name = models.CharField(max_length=255, blank=True, null=True)
    severity = models.CharField(max_length=255, choices=SEVERITY_TYPE, blank=True, null=True)
    # cvss_score = models.FloatField(null=True, blank=True)
    # cwe_id = models.CharField(max_length=255, null=True, blank=True)
    description = models.TextField(blank=True, null=True)
    affected_resource = models.TextField(blank=True, null=True)

    class Meta:
        db_table = 'vulnerability_scan'

    def __str__(self):
        return self.vulnerability_name


class Intrusion(models.Model):
    EVENT_TYPE = [
        ('SUSPECIOUS_LOGIN', 'Suspecious login'),
    ]

    scan = models.ForeignKey(Scan, on_delete=models.CASCADE, related_name='intrusion_events', blank=True, null=True)
    event_time = models.DateTimeField(blank=True, null=True)
    event_type = models.CharField(max_length=255, choices=EVENT_TYPE, blank=True,
                                  null=True)  # e.g., "Suspicious login", "Port scan detected"
    source_ip = models.CharField(max_length=50, blank=True, null=True)
    destination_ip = models.CharField(max_length=50, blank=True, null=True)
    port = models.IntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    file_name = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        db_table = 'intrusion_detection'

    def __str__(self):
        return self.event_time


class Alert(models.Model):
    ALERT_LEVEL = [
        ('LOW', 'Low'),
        ('MEDIUM', 'Medium'),
        ('HIGH', 'High'),
    ]

    alert_time = models.DateTimeField(auto_now_add=True)
    alert_message = models.TextField()
    alert_level = models.CharField(max_length=255, choices=ALERT_LEVEL)
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    class Meta:
        db_table = 'alert'

    def __str__(self):
        return self.alert_level

class Report(models.Model):
    scan = models.OneToOneField(Scan, on_delete=models.CASCADE, primary_key=True, related_name='report')
    generated_at = models.DateTimeField(auto_now_add=True)
    report_data_json = models.JSONField(blank=True, null=True)

    class Meta:
        db_table = 'report'

    def __str__(self):
        return self.scan.scan_type

class ReportFile(models.Model):
    report = models.ForeignKey(Report, on_delete=models.CASCADE, related_name='report_files')
    report_file = models.FileField(upload_to='reports/')

    class Meta:
        db_table = 'report_file'

    def __str__(self):
        return self.report

# class Contact(models.Model):
#     CONTACT_TYPE_CHOICES = [
#         ('individual', 'Individual'),
#         ('agency', 'Agency'),
#     ]
#
#     first_name = models.CharField(max_length=100, verbose_name="First Name")
#     last_name = models.CharField(max_length=100, verbose_name="Last Name")
#     email = models.EmailField(verbose_name="Email")
#     mobile_number = models.CharField(
#         max_length=15,
#         validators=[RegexValidator(r'^\+?1?\d{9,15}$', 'Enter a valid phone number')],
#         null=True, blank=True
#     )
#     contact_type = models.CharField(max_length=50, choices=CONTACT_TYPE_CHOICES, verbose_name="Type")
#     message = models.TextField(blank=True, verbose_name="Message")
#     timestamp = models.DateTimeField(auto_now_add=True)
#
#     class Meta:
#         db_table = 'contact_us'

    def __str__(self):
        return self.contact_type

class Feedback(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='feedbacks')
    rating = models.PositiveIntegerField()
    message = models.TextField(blank=True, verbose_name="Message")

    class Meta:
        db_table = 'feedback'

    def __str__(self):
        return self.user.first_name